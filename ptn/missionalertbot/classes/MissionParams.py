class MissionParams:
    """
    A class to store all parameters relating to mission generation.
    This class can be pickled into the missions database for later retrieval.
    Note we cannot pickle discord.py objects.

    Most of these values are assigned directly to the instance via MissionParams.value but the full list
    is included below for the purpose of clarity.
    """
    def __init__(self, carrier_name_search_term, commodity_search_term, system, station, profit, pads, demand,
                 eta=None, rp=None, mission_type=None, legacy=False, carrier_data=None, commodity_data=None,
                 file_name=None, edmc_off=False, eta_text=None, rp_text=None, reddit_title=None, reddit_body=None,
                 reddit_post_id=None, reddit_post_url=None, reddit_comment_id=None, reddit_comment_url=None,
                 discord_text=None, discord_alert_id=None, mission_temp_channel_id=None, webhook_msg_ids=[None],
                 webhook_urls=[None]):
        self.carrier_name_search_term = carrier_name_search_term # the carrier name fragment to search for
        self.commodity_search_term = commodity_search_term # the commodity name fragment to search for
        self.system = system.upper() # the target system
        self.station = station.upper() # target station
        self.profit = profit # profit as int or float
        self.pads = pads.upper() # size of largest landing pad L or M
        self.demand = demand # total supply/demand for commodity
        self.eta = eta # optional ETA in minutes
        self.rp = rp # flag for whether the mission uses roleplay text TODO: switch to a modal triggered by button?
        self.eta_text = eta_text # ETA converted into a text string TODO: ETA is slated to be deprecated into a general addendum string
        self.mission_type = mission_type # whether the mission is loading or unloading
        self.legacy = legacy # whether the mission is legacy or live
        self.edmc_off = edmc_off # whether the mission is EDMC off flagged
        self.carrier_data = carrier_data # carrier data class retrieved from db
        self.commodity_data = commodity_data # commodity data class retrieved from db
        self.file_name = file_name # the image file name
        self.rp_text = rp_text # roleplay text entered by user
        self.reddit_title = reddit_title # title for the subreddit post
        self.reddit_body = reddit_body # body text for the top-level comment on the subreddit post
        self.reddit_post_id = reddit_post_id # the ID of the mission's Reddit post
        self.reddit_post_url = reddit_post_url # the URL of the mission's Reddit post
        self.reddit_comment_id = reddit_comment_id # the ID of the mission's autogenerated Reddit top comment
        self.reddit_comment_url = reddit_comment_url # the URL of the mission's autogenerated Reddit top comment
        self.discord_text = discord_text # the text used for the trade alert sent to Discord
        self.discord_alert_id = discord_alert_id # the message ID of the Discord trade alerts entry
        self.mission_temp_channel_id = mission_temp_channel_id # the channel ID of the Discord carrier mission channel
        self.webhook_urls = webhook_urls # a list of the URLs for any webhooks used
        self.webhook_msg_ids = webhook_msg_ids # a list of the IDs of any messages sent via webhook

    def print_values(self):
        print(f"carrier_name_search_term: {self.carrier_name_search_term}")
        print(f"commodity_search_term: {self.commodity_search_term}")
        print(f"system: {self.system}")
        print(f"station: {self.station}")
        print(f"profit: {self.profit}")
        print(f"pads: {self.pads}")
        print(f"demand: {self.demand}")
        print(f"eta: {self.eta}")
        print(f"rp flag: {self.rp}")
        print(f"eta_text: {self.eta_text}")
        print(f"mission_type: {self.mission_type}")
        print(f"legacy: {self.legacy}")
        print(f"edmc_off: {self.edmc_off}")
        print(f"carrier_data: {self.carrier_data}")
        print(f"commodity_data: {self.commodity_data}")
        print(f"rp_text: {self.rp_text}")
        print(f"reddit_title: {self.reddit_title}")
        print(f"reddit_body: {self.reddit_body}")
        print(f"reddit_post_id: {self.reddit_post_id}")
        print(f"reddit_post_url: {self.reddit_post_url}")
        print(f"reddit_comment_id: {self.reddit_comment_id}")
        print(f"reddit_comment_url: {self.reddit_comment_url}")
        print(f"discord_text: {self.discord_text}")
        print(f"discord_alert_id: {self.discord_alert_id}")
        print(f"mission_temp_channel_id: {self.mission_temp_channel_id}")
        print(f"webhook_urls: {self.webhook_urls}")
        print(f"webhook_msg_ids: {self.webhook_msg_ids}")

